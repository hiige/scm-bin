#!/usr/bin/env scm
(import
 (chibi) (chibi string)
 (chibi char-set) (chibi io)
 (chibi process) (srfi 1)
 (scm util string))

(define (paren-val c)
  (+ 1
   (* 2
    (- (char->integer #\()
        (char->integer c)))))

(define (open-parens str)
  (let loop ((s str) (c 0))
    (let*
     ((idx (string-find s (char-set #\) #\()))
      (cur (substring-cursor
            s
            idx
            (string-cursor-end s)))
      (i (string-cursor-start cur)))
       (cond
         ((string-null? cur) c)
         ((string-lit? cur i)
          (loop
           (substring-cursor cur
            (string-cursor-next cur i))
           c))
         (else
           (let
            ((j
              (string-skip cur
                           (string-cursor-ref cur i))))
             (loop
              (substring-cursor cur
                                j
                                (string-cursor-end cur))
              (+ c
                 (* (string-cursor-diff cur i j)
                     (paren-val (string-cursor-ref cur i)))))))))))

(define (line-accumulator f op b)
  (let* ((line (read-line))
         (r (f line)))
           (if (null? r) b
             (line-accumulator f op (op r b)))))

(let ((c
       (line-accumulator
        (lambda (line)
          (if (eof-object? line) '()
            (let* ((i (string-find-nonlit line #\;))
                   (text
                    (string-unqoute
                     (if (string-cursor<? i
                          (string-cursor-end line))
                       (substring-cursor line
                                         (string-cursor-start line)
                                         i)
                       line))))
             (if (= 0 (string-length text)) 0
               (open-parens text)))))
        +
        0)))
  (if (> c 0)
    (write-line
     (apply string
            (chars #\)
            c)))))
      
